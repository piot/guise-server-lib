cmake_minimum_required(VERSION 3.17)
project(guise_server_lib C)

set(CMAKE_C_STANDARD 99)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(isDebug TRUE)
else()
  message("no debug")
  set(isDebug FALSE)
endif()

if(isDebug)
  message("Debug build detected")
  add_compile_definitions(CONFIGURATION_DEBUG TYRAN_CONFIGURATION_DEBUG)
  set(CONFIGURATION_DEBUG 1)
endif()

set(DEPS ../../deps/)

file(GLOB lib_src FOLLOW_SYMLINKS "*.c")

add_library(guise_server_lib STATIC ${lib_src})

target_compile_options(
  guise_server_lib
  PRIVATE -Weverything -Werror -Wno-padded
  -Wno-documentation # should be re-enabled
          -Wno-declaration-after-statement # must be bug in clang? shows up even
                                           # if std=c99
)

if(COMPILER_CLANG)
  target_compile_options(
    guise_server_lib PRIVATE -Wmost -Weverything
                             -Werror=missing-variable-declarations)
endif()

target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/flood-c/src/include)
target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/guise-serialize-c/src/include)
target_include_directories(guise_server_lib PUBLIC ${DEPS}piot/clog/src/include)
target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/tiny-libc/src/include)
target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/imprint/src/include)
target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/secure-random-c/src/include)
target_include_directories(guise_server_lib
                           PUBLIC ${DEPS}piot/user-serialize-c/src/include)

target_include_directories(guise_server_lib PUBLIC ../include)
